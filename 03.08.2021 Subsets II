Prob:

Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10

My SOl:

class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        print(nums)
        res = [[]]
        
        def rec(cur,i):
            new_list = list(cur)
            if len(new_list) > len(nums):
                return
            if new_list not in res:
                res.append(new_list)
            for j in range(i+1, len(nums)):
                cur.append(nums[j])
                rec(cur, j)
                cur.pop()
        for i in range(len(nums)):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            rec([nums[i]], i)
        return res
        
