Prob:

Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
Example 3:

Input: s = "a"
Output: "a"
Example 4:

Input: s = "ac"
Output: "a"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters (lower-case and/or upper-case),


MY SOl:

class Solution:
    def longestPalindrome(self, s: str) -> str:
        
        pivot = 0
        n = len(s)
        subStr = ""
        
        while pivot < n:
            
            right = pivot + 1
            left = pivot
            while right < n and s[pivot] == s[right]:
                right += 1
                subStr = s[left:right] if right-left > len(subStr) else subStr
            left = pivot - 1

            while True:
                if left >= 0 and right < n and s[left] != s[right]:
                    left += 1
                    break
                if s[left+1] == s[right-1] and right >= n:
                    left+=1
                    break
                if left < 0:
                    left += 1
                    break
                if right >= n and s[left] != s[right-1]:
                    right -= 1
                    break
                left -= 1
                right += 1
                
                
                
            
            subStr = s[left:right] if right-left > len(subStr) else subStr
            pivot += 1
        return subStr
