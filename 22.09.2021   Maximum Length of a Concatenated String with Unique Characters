Prob:

Given an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.

Return the maximum possible length of s.

 

Example 1:

Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All possible concatenations are "","un","iq","ue","uniq" and "ique".
Maximum length is 4.
Example 2:

Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible solutions are "chaers" and "acters".
Example 3:

Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26
 

Constraints:

1 <= arr.length <= 16
1 <= arr[i].length <= 26
arr[i] contains only lower case English letters.


My SOl:

class Solution:
    def maxLength(self, arr: List[str]) -> int:
        arr.sort(key=len, reverse=True)
        n = len(arr)
        maxxLetters = 0
        thisRoundSeqs = []
        for i in range(n):
            currSeq = ''
            currH = defaultdict(int)
            availSeq = True
            for c in arr[i]:
                currSeq += c
                if c in currH: 
                    availSeq = False
                    break
                currH[c] = 1
            if not availSeq:
                currSeq = ''
                currH = defaultdict(int)
            for eachSeq in thisRoundSeqs:
                cSeq = eachSeq[0]
                cDict = eachSeq[1]

                availSeq = True
                newSeq = ''
                for c in arr[i]:
                    newSeq += c
                    if c in cDict:
                        availSeq = False
                        break
                    cDict[c] = 1
                if availSeq:
                    eachSeq[1] = Counter(cSeq)
                    brandNewSeq = cSeq + newSeq
                    brandNewDict = Counter(brandNewSeq)
                    thisRoundSeqs.append([brandNewSeq, brandNewDict])
                else:
                    cSeq = eachSeq[0]
                    eachSeq[1] = Counter(cSeq)

            thisRoundSeqs.append([currSeq, currH])      
        
        thisRoundSeqs.sort(key=lambda x: len(x[0]),reverse=True)
        maxxLetters = len(thisRoundSeqs[0][0])
        return maxxLetters
