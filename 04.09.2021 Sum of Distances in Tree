Prob:

There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.

You are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

Return an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.

 

Example 1:


Input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]
Output: [8,12,6,10,10,10]
Explanation: The tree is shown above.
We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)
equals 1 + 1 + 2 + 2 + 2 = 8.
Hence, answer[0] = 8, and so on.
Example 2:


Input: n = 1, edges = []
Output: [0]
Example 3:


Input: n = 2, edges = [[1,0]]
Output: [1,1]
 

Constraints:

1 <= n <= 3 * 104
edges.length == n - 1
edges[i].length == 2
0 <= ai, bi < n
ai != bi
The given input represents a valid tree.

My Sol:

class Solution:
    def sumOfDistancesInTree(self, n: int, edges: List[List[int]]) -> List[int]:
        childs = [set() for i in range(n)]
        childsNumber = [0 for i in range(n)]
        childsNumberReal = [0 for i in range(n)]
        visited = [0 for i in range(n)]
        for e in edges:
            childsNumber[e[1]] = 0
            if e[0] == 0:
                childs[0].add(e[1])
            elif e[1] == 0:
                childs[0].add(e[0])
            else:
                childs[e[0]].add(e[1])
                childs[e[1]].add(e[0])
        
        def rec(index, parent = None):
            res = 0
            realChilds = 0
            l = 0
            lFinal = 0
            for c in childs[index]:
                if c == parent: continue
                r, l = rec(c, index)
                lFinal += l
                res += r + l + 1
                if c != parent: realChilds += 1
            childsNumber[index] = res
            childsNumberReal[index] = realChilds+lFinal
            return [res, realChilds+lFinal]
        rec(0)
        
        def rec2(index, parent = None):
            thisSum = childsNumber[index]
            
            for c in childs[index]:
                if c == parent: continue
                m = childsNumberReal[c]
                childsNumber[c] = thisSum + (n-2-m) - m
                if c != parent:
                    rec2(c, index)
                
        rec2(0)
        return childsNumber
        
