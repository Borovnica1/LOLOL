Prob:

You are given an m x n integer matrix heights representing the height of each unit cell in a continent. The Pacific ocean touches the continent's left and top edges, and the Atlantic ocean touches the continent's right and bottom edges.

Water can only flow in four directions: up, down, left, and right. Water flows from a cell to an adjacent one with an equal or lower height.

Return a list of grid coordinates where water can flow to both the Pacific and Atlantic oceans.

 

Example 1:


Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
Example 2:

Input: heights = [[2,1],[1,2]]
Output: [[0,0],[0,1],[1,0],[1,1]]
 

Constraints:

m == heights.length
n == heights[i].length
1 <= m, n <= 200
1 <= heights[i][j] <= 105

Sol:

class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        
        
        # AMAZING TRY FROM BOTH OCEANS SIDE!!
        # AMAZING TRY FROM BOTH OCEANS SIDE!!
        # AMAZING TRY FROM BOTH OCEANS SIDE!!
        # AMAZING TRY FROM BOTH OCEANS SIDE!!
        l = len(heights)
        l2 = len(heights[0])
        pacif = [[False for i in range(l2)] for k in range(l)]
        atlan = [[False for i in range(l2)] for k in range(l)]
        print(l,l2,pacif)
        
        
        
        def dfs(i, j, ocean, prev):
            # when to return or base case
            if i < 0 or j < 0 or i == l or j == l2:
                return
            elif prev > heights[i][j]:
                return
            elif ocean[i][j]:
                return
            
            # this cell is true for that ocean
            ocean[i][j] = True
            # call more bfs
            dfs(i-1,j,ocean,heights[i][j])
            dfs(i+1,j,ocean,heights[i][j])
            dfs(i,j-1,ocean,heights[i][j])
            dfs(i,j+1,ocean,heights[i][j])
        
        for j in range(0, l2):
            dfs(0, j, pacif, 0)
            dfs(l-1,j, atlan, 0)
        for i in range(0, l):
            dfs(i, 0, pacif, 0)
            dfs(i, l2-1, atlan, 0)
            
        for row in atlan:
            print(row)
        print(' ')
        for row in pacif:
            print(row)
            
        answer = []
        for i in range(0,l):
            for j in range(0, l2):
                if pacif[i][j] and atlan[i][j]:
                    answer.append([i, j])
        return answer
        
        
        
        
        
        # FIRST ATTEMPT LOL
        # FIRST ATTEMPT LOL
        # FIRST ATTEMPT LOL
        # 111/113 test passed tho
        
        l = len(heights)
        l2 = len(heights[0])
        print(l, l2)
        pac = [[False for i in range(l2)] for k in range(l)]
        atl = [[False for i in range(l2)] for k in range(l)]
        visited = [[False for i in range(l2)] for k in range(l)]
        print(pac)
        for row in heights:
            print(row)
        count = 0

        
        def dfs(i, j):
            nonlocal count
            count += 1
            
            if i == 0 or j == 0:
                #pacific hit
                pac[i][j] = True
            if i == l-1 or j == l2-1:
                #atlantic hit
                atl[i][j] = True
                
            #[[3,3,3,3,3,3],
            # [3,0,3,3,0,3],
            # [3,3,3,3,3,3]]
            #if pacific and atlantic:
            #    return True
            if visited[i][j]:
                return [pac[i][j],atl[i][j]]
            visited[i][j] = True
            print(count)
            print(i, j, l, l2)
            for row in atl:
                print(row)
            print(' ')
            if i != 0 and heights[i][j] >= heights[i-1][j]:
                v = dfs(i-1, j)
                if v[0]:
                    pac[i][j] = v[0]
                if v[1]:
                    atl[i][j] = v[1]
            if j != 0 and heights[i][j] >= heights[i][j-1]:
                v = dfs(i, j-1)
                if v[0]:
                    pac[i][j] = v[0]
                if v[1]:
                    atl[i][j] = v[1]
            if i != l-1 and heights[i][j] >= heights[i+1][j]:
                v = dfs(i+1, j)
                if v[0]:
                    pac[i][j] = v[0]
                if v[1]:
                    atl[i][j] = v[1]
            if j != l2-1 and heights[i][j] >= heights[i][j+1]:
                v = dfs(i, j+1)
                if v[0]:
                    pac[i][j] = v[0]
                if v[1]:
                    atl[i][j] = v[1]
            print('DECURSIOOOOOOOOOOONNNNNNNNNNNNNNNNN')
            print(count)
            print(i, j)
            for row in atl:
                print(row)
            print(' ')
            return [pac[i][j],atl[i][j]]
            
        
        answer = []
        for i in range(0, l):
            for j in range(0, l2):
                vals = dfs(i, j)
                if vals[0] and vals[1]:
                    answer.append([i, j])
                    
                print('IDEMOOO', i , j)
                
            
            
        for row in pac:
            print(row)
        print(' ')
        for row in atl:
            print(row)
        print(answer)
        return answer
            
