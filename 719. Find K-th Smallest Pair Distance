Prob:

Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.

Example 1:
Input:
nums = [1,3,1]
k = 1
Output: 0 
Explanation:
Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.
Note:
2 <= len(nums) <= 10000.
0 <= nums[i] < 1000000.
1 <= k <= len(nums) * (len(nums) - 1) / 2.

Sol:

class Solution:
    def smallestDistancePair(self, nums: List[int], k: int) -> int:
        def condition(midDist):
            count, i, j = 0, 0, 0 
            while i < n or j < n:
                while j < n and nums[j] - nums[i] <= midDist:  # move fast pointer
                    print(nums[i], nums[j])
                    j += 1
                print(j, i)
                count += j - i - 1  # count pairs
                i += 1  # move slow pointer
                if count >= k:
                    return True
            return False
        n = len(nums)
        nums.sort()
        left, right = 0, nums[-1] - nums[0]
        
        while left < right:
            mid = left + (right - left) // 2
            
            if condition(mid):
                right = mid
            else:
                left = mid + 1
        return left
