Prob:

Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

 

Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
 

Constraints:

3 <= nums.length <= 10^3
-10^3 <= nums[i] <= 10^3
-10^4 <= target <= 10^4

MY Sol:

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        # sort and two pointers with binary search
        
        closest = float('infinity')
        
        for i in range(0,  len(nums)-2):
            sortedArr = [nums[i+1]]
            for j in range(i+2, len(nums)):
                lookingFor = target - (nums[i]+nums[j])
                left = 0
                right = len(sortedArr)-1
                while left < right:
                    mid = left + ((right-left) // 2)
                    
                    if sortedArr[mid] == lookingFor:
                        return target
                    elif sortedArr[mid] < lookingFor:
                        left = mid+1
                    else:
                        right = mid
                if left > 0 and abs(sortedArr[left-1] - lookingFor) < abs(sortedArr[left] - lookingFor):
                    left -= 1
                currClosest = nums[i] + nums[j] + sortedArr[left]
                if abs(currClosest - target) < abs(closest - target):
                    closest = currClosest
                
                sortedArr.append(nums[j])
                sortedArr.sort()
        return closest
