Prob:

Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.

 

Example 1:

Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]
Output: 3
Explanation: The repeated subarray with maximum length is [3,2,1].
Example 2:

Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]
Output: 5
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 100

My Sol:

class Solution:
    def findLength(self, nums1: List[int], nums2: List[int]) -> int:
        dp = [[0 for _ in range(len(nums2))] for _ in range (len(nums1))]
        subMax = 0;
        for i in range(0, len(dp)):
            for j in range(0, len(dp[0])):
                if nums1[i] == nums2[j] and i > 0 and j > 0:
                    dp[i][j] += 1 + dp[i-1][j-1]
                elif nums1[i] == nums2[j]:
                    dp[i][j] = 1
                if dp[i][j] > subMax:
                    subMax = dp[i][j]
        return subMax
