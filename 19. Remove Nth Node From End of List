Prob:

Given the head of a linked list, remove the nth node from the end of the list and return its head.

Follow up: Could you do this in one pass?

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz


My Sol:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        l = 0
        curr2 = head
        curr = head
        while head != None:
            l += 1
            head = head.next
        print(l, head)
        pos = l - n - 1
        while pos > 0:
            pos -= 1
            curr = curr.next
        print('LOOOL',curr)
        if l > 1 and l != n:
            curr.next = curr.next.next
        elif l == 1 and n == 1:
            return None
        elif l == n:
            return curr.next
        return curr2
