Prob:

Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

 

Example 1:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
Example 2:

Input: triangle = [[-10]]
Output: -10
 

Constraints:

1 <= triangle.length <= 200
triangle[0].length == 1
triangle[i].length == triangle[i - 1].length + 1
-104 <= triangle[i][j] <= 104

mY sOL:

class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        row = len(triangle)-1
        memo = [[float('infinity') for j in range(0, i+1)] for i in range(row+1)]
        def rec(r, c):
            if c < 0 or c == len(triangle[r]): return float('infinity')
            if memo[r][c] != float('infinity'): return memo[r][c]
            if r == 0 and c == 0:
                memo[0][0] = triangle[r][c]
                return memo[0][0]
            for col in range(len(triangle[r])):
                triangle[r][col] = triangle[r][col] + min(rec(r-1, col-1), rec(r-1, col))
                memo[r][col] = triangle[r][col]
            return memo[r][c]            
        rec(row, 0)
        return min(triangle[row])

bottom up approach:

class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        row = len(triangle)-2
        for r in range(row, -1, -1):
            for c in range(0, len(triangle[r])):
                triangle[r][c] = triangle[r][c] + min(triangle[r+1][c], triangle[r+1][c+1])
        return triangle[0][0]
