Prob:

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

Follow up: The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
Example 3:

Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000
Example 4:

Input: nums1 = [], nums2 = [1]
Output: 1.00000
Example 5:

Input: nums1 = [2], nums2 = []
Output: 2.00000

BInARY Search sol:

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        print('xsxsx')
        if len(nums1) <= len(nums2):
            left, right = 0, len(nums1)
        else:
            return self.findMedianSortedArrays(nums2, nums1)
        
        while left <= right:
            partX = left + (right - left) // 2
            partY = (len(nums1) + len(nums2) + 1) // 2 - partX
            print(partX, partY)
            
            maxLeftX = float('-inf') if partX == 0 else nums1[partX - 1]
            minRightX = float('inf') if partX == len(nums1) else nums1[partX]
            
            maxLeftY = float('-inf') if partY == 0 else nums2[partY - 1]
            minRightY = float('inf') if partY == len(nums2) else nums2[partY]
            
            if maxLeftX <= minRightY and maxLeftY <= minRightX:
                return float(max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2 if (len(nums1) + len(nums2)) % 2 == 0 else max(maxLeftX,maxLeftY)
                break
            if maxLeftX > minRightY:
                right = partX - 1
            else:
                left = partX + 1
        
