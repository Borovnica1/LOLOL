Prob:

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109


MY SOLUTION:

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if len(nums) == 0: return [-1, -1]
        left, right = 0, len(nums) - 1
        result = [-1, -1]
        while left <= right:
            mid = left + (right - left) // 2
            print(nums[mid], nums[mid - 1])
            if target == nums[mid]:
                result[0] = mid
            if target == nums[mid] and nums[mid - 1] < target:
                result[0] = mid
                break
            if target <= nums[mid]:
                right = mid - 1
            if nums[mid] < target:
                left = mid + 1
        
        print(mid)
        while nums[mid] == target:
            result[1] = mid
            mid += 1
            if mid == len(nums): break
        print(result)
        
        return result
