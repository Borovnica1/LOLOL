Prob:

Given an array of integers numbers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

Return the indices of the two numbers (1-indexed) as an integer array answer of size 2, where 1 <= answer[0] < answer[1] <= numbers.length.

You may assume that each input would have exactly one solution and you may not use the same element twice.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]

My Sol:

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        
        
        for i in range(0, len(numbers)-1):
            left, right = i, len(numbers) -1
            
            while left <= right:
                mid = left + (right - left) // 2
                if i == 3: print(mid)
                if numbers[mid] + numbers[i] == target and mid != i:
                    return [i+1, mid+1]
                
                if target - numbers[i] < numbers[mid]:
                    right = mid - 1
                if numbers[mid] <= target - numbers[i]:
                    left = mid + 1
