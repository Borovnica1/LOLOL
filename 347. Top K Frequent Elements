Prob:

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

sOL:

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        
        d = Counter(nums)
        
        arr = [[] for _ in range(len(nums))]
        for key in d:
            arr[d[key]-1].append(key)
        res = []
        for i in range(len(nums)-1, -1, -1):
            while arr[i] != []:
                res.append(arr[i].pop())
                k -= 1
                if k == 0:
                    break
            if k == 0:
                break
        return res
