Prob:

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

 

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
Example 3:

Input: intervals = [], newInterval = [5,7]
Output: [[5,7]]
Example 4:

Input: intervals = [[1,5]], newInterval = [2,3]
Output: [[1,5]]
Example 5:

Input: intervals = [[1,5]], newInterval = [2,7]
Output: [[1,7]]
 

Constraints:

0 <= intervals.length <= 104
intervals[i].length == 2
0 <= intervals[i][0] <= intervals[i][1] <= 105
intervals is sorted by intervals[i][0] in ascending order.
newInterval.length == 2
0 <= newInterval[0] <= newInterval[1] <= 105


My SOl:

class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        if len(intervals) == 0: return [newInterval]
        res = []
        startFound = False
        endFound = False
        bothFound = False
        for (i, interval) in enumerate(intervals):
            if interval[1] >= newInterval[0] and not startFound:
                if newInterval[0] <= interval[0]:
                    startOfInterval = newInterval[0]
                else:
                    startOfInterval = interval[0]
                startFound = True
                
            if newInterval[1] <= interval[0] and startFound and not bothFound:
                if newInterval[1] == interval[0]:
                    endofInterval = interval[1]
                    res.append([startOfInterval, endofInterval])
                    bothFound = True
                    continue
                else:
                    if newInterval[1] > intervals[i-1][1]:
                        endofInterval = newInterval[1]
                    else:
                        if i != 0:
                            endofInterval = intervals[i-1][1]
                        else:
                            endofInterval = newInterval[1]
                    res.append([startOfInterval, endofInterval])
                    bothFound = True
            if (not startFound and not endFound) or bothFound:
                res.append(interval)
            if i == len(intervals) - 1 and not bothFound:
                if not startFound:
                    startOfInterval = newInterval[0]
                if newInterval[1] > interval[1]:
                    endofInterval = newInterval[1]
                else:
                    endofInterval = interval[1]
                res.append([startOfInterval, endofInterval])
        return res
