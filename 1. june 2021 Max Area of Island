Max Area of Island

Solution
You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 

Example 1:


Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.
Example 2:

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.

MY SOl:

class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:

        
        m = len(grid)
        n = len(grid[0])
        
        def dfs(i, j, g, curr):
            if i < 0 or j < 0 or i >= m or j >= n:
                return curr
            
            if g[i][j] == 1:
                g[i][j] = 0
                curr += 1
            else:
                return curr
            
            curr = dfs(i+1, j, g, curr)
            curr = dfs(i-1, j, g, curr)
            curr = dfs(i, j+1, g, curr)
            curr = dfs(i, j-1, g, curr)
            return curr
        
        maxx = 0
        for i in range(m):
            for j in range(n):
                currmaxx = dfs(i, j, grid, 0)
                if currmaxx > maxx:
                    maxx = currmaxx
        return maxx
