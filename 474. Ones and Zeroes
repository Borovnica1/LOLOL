Prob:

You are given an array of binary strings strs and two integers m and n.

Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.

A set x is a subset of a set y if all elements of x are also elements of y.

 

Example 1:

Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
{"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.
Example 2:

Input: strs = ["10","0","1"], m = 1, n = 1
Output: 2
Explanation: The largest subset is {"0", "1"}, so the answer is 2.
 

Constraints:

1 <= strs.length <= 600
1 <= strs[i].length <= 100
strs[i] consists only of digits '0' and '1'.
1 <= m, n <= 100


MY sOL:

class Solution:
    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        l = len(strs)
        dp = [[[0 for _ in range(n+1)] for _ in range(m+1)] for _ in range(l+1)]
        
        for i in range(1, l+1):
            s = strs[i-1]
            ones = s.count('1')
            zeros = s.count('0')
            
            for j in range(0, m+1):
                for k in range(0, n+1):
                    if j >= zeros and k >= ones:
                        dp[i][j][k] = max(dp[i-1][j][k], 1 + dp[i-1][j-zeros][k-ones])
                    else:
                        dp[i][j][k] = dp[i-1][j][k]
        return dp[l][j][k]

REC SOL WITH MEMO:

class Solution:
    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        dp = [[[-1 for i in range(len(strs))] for j in range(n+1)] for k in range(m+1)]
        
        def rec(i, m, n):
            if i >= len(strs) or m + n == 0: return 0
            if dp[m][n][i] != -1: return dp[m][n][i]
            s = strs[i]
            ones = s.count('1')
            zeroes = s.count('0')
            lolMax = 0
            if n >= ones and m >= zeroes:
                lolMax = rec(i+1, m-zeroes, n-ones) + 1
            lol = max(lolMax, rec(i+1, m, n))
            dp[m][n][i] = lol
            return lol
        ide = rec(0, m, n)
        return ide
