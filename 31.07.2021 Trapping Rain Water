Prob:

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
0 <= n <= 3 * 104
0 <= height[i] <= 105


My Sol:

class Solution:
    def trap(self, height: List[int]) -> int:
        left = 0
        right = len(height)-1
        rainWaterSumm = 0
        currMinCont = 0
        while left < right:
            if height[left] <= height[right]:
                currMinCont = max(currMinCont, height[left])
                left += 1
                if height[left] < currMinCont:
                    rainWaterSumm += currMinCont - height[left]
            else:
                currMinCont =  max(currMinCont, height[right])
                right -= 1
                if height[right] < currMinCont:
                    rainWaterSumm += currMinCont - height[right]
        return rainWaterSumm
                
