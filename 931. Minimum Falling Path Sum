Prob:

Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:

Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum underlined below:
[[2,1,3],      [[2,1,3],
 [6,5,4],       [6,5,4],
 [7,8,9]]       [7,8,9]]
Example 2:

Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is underlined below:
[[-19,57],
 [-40,-5]]
Example 3:

Input: matrix = [[-48]]
Output: -48
 

Constraints:

n == matrix.length
n == matrix[i].length
1 <= n <= 100
-100 <= matrix[i][j] <= 100

MY SOl:

class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        m = len(matrix)
        n = len(matrix[0])
        dp = [[float('inf') for i in range(n)] for j in range(m)]
        
        def rec(row, col):
            if col < 0 or col >= n: return float('inf')
            if row == n-1: return matrix[row][col]
            if dp[row][col] != float('inf'): return dp[row][col]
            minn = min(rec(row+1, col-1),rec(row+1, col),rec(row+1, col+1))
            matrix[row][col] += minn
            dp[row][col] = matrix[row][col]
            return dp[row][col]
        
        res = []
        for j in range(n):
            res.append(rec(0,j))
            
        return min(res)
