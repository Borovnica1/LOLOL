PrOB:

Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000


My Sol:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if root == None: return None
        q = []
        
        q.append([root])
        res = []
        i = 0
        while q[0]:
            level = q.pop(0)
            values = []
            nextLevel = []
            for i in range(len(level)):
                values.append(level[i].val)
                if level[i].left != None:
                    nextLevel.append(level[i].left)
                if level[i].right != None:
                    nextLevel.append(level[i].right)
            res.append(values)
            q.append(nextLevel)
        return res
