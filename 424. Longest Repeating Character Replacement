Prob:

You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

 

Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
 

Constraints:

1 <= s.length <= 105
s consists of only uppercase English letters.
0 <= k <= s.length

MY SOL:

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:

        # SLIDING WINDOW O(N)
        
        if len(s) == 0: return 0
        d = {}
        
        # check from left to right most
        # mark first diff
        # save curr max and start again
        left = 0
        i = 0
        k2 = k
        diffChars = []
        currMaxx = 0
        maxx = 0

        finding = 0
        while i < len(s):
            c = s[i]
            ## diffChar[first , nextone]
            if c != s[finding] and k == 0:

                while c == s[finding]:
                    d[s[finding]] -= 1
                    currMaxx -= 1
                    finding += 1
                d[s[finding]] -= 1
                currMaxx -= 1
                finding += 1
                if s[finding-1] in d:
                    k -= d[s[finding-1]]
                if s[finding] in d:
                    k += d[s[finding]]
                while k < 0:
                    d[s[i-1]] -= 1
                    currMaxx -= 1
                    if s[i-1] != s[finding]:
                        k += 1                    
                    i -= 1
                continue
                
                
            if c != s[finding]:
                k -= 1
            if c in d:
                d[c] += 1
                currMaxx += 1
            else:
                d[c] = 1
                currMaxx += 1
                
                
            i += 1
            if i == len(s):
                currMaxx = min(len(s), currMaxx + k)
            if currMaxx > maxx:
                maxx = currMaxx
            
        return maxx
