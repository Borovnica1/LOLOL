Tic-tac-toe is played by two players A and B on a 3 x 3 grid.

Here are the rules of Tic-Tac-Toe:

Players take turns placing characters into empty squares (" ").
The first player A always places "X" characters, while the second player B always places "O" characters.
"X" and "O" characters are always placed into empty squares, never on filled ones.
The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
Given an array moves where each element is another array of size 2 corresponding to the row and column of the grid where they mark their respective character in the order in which A and B play.

Return the winner of the game if it exists (A or B), in case the game ends in a draw return "Draw", if there are still movements to play return "Pending".

You can assume that moves is valid (It follows the rules of Tic-Tac-Toe), the grid is initially empty and A will play first.

 

Example 1:

Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: "A"
Explanation: "A" wins, he always plays first.
"X  "    "X  "    "X  "    "X  "    "X  "
"   " -> "   " -> " X " -> " X " -> " X "
"   "    "O  "    "O  "    "OO "    "OOX"
Example 2:

Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
Output: "B"
Explanation: "B" wins.
"X  "    "X  "    "XX "    "XXO"    "XXO"    "XXO"
"   " -> " O " -> " O " -> " O " -> "XO " -> "XO " 
"   "    "   "    "   "    "   "    "   "    "O  "
Example 3:

Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
Output: "Draw"
Explanation: The game ends in a draw since there are no moves to make.
"XXO"
"OOX"
"XOX"
Example 4:

Input: moves = [[0,0],[1,1]]
Output: "Pending"
Explanation: The game has not finished yet.
"X  "
" O "
"   "


My Solution:

class Solution:
    def tictactoe(self, moves: List[List[int]]) -> str:
        
        colSums = [0 for x in range(3)]
        rowSums = [0 for x in range(3)]
        print(colSums, rowSums)
        diag1Sum = 0
        diag2Sum = 0
        print(diag1Sum, diag2Sum)
        
        if len(moves) % 2 == 0:
            winner = 'B'
        else:
            winner = 'A'
        
        player = 0
        for move in moves:
            if player % 2 == 0:
                rowSums[move[0]] += 1
                colSums[move[1]] += 1
                if move[0] == move[1]:
                    diag1Sum += 1
                if move[0] == 2 - move[1]:
                    diag2Sum += 1
                
            else:
                rowSums[move[0]] -= 1
                colSums[move[1]] -= 1
                if move[0] == move[1]:
                    diag1Sum -= 1
                if move[0] == 2 - move[1]:
                    diag2Sum -= 1
                
            player += 1
        print(colSums, rowSums)
        print(diag1Sum, diag2Sum)
        if diag1Sum == 3 or diag2Sum == 3 or 3 in colSums or 3 in rowSums or diag1Sum == -3 or diag2Sum == -3 or -3 in colSums or -3 in rowSums:
            return winner
        elif len(moves) < 9:
            return 'Pending'
        else:
            return 'Draw'
        
